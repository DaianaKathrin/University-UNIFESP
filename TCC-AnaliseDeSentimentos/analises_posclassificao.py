# -*- coding: utf-8 -*-
"""Analises_PosClassificao.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12b-WjJa5z_n3LuaYDlxpqj9ilAPSL2GY
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from wordcloud import WordCloud
from wordcloud import ImageColorGenerator
from wordcloud import STOPWORDS
import numpy as np
from PIL import Image
import nltk
from nltk.corpus import stopwords
import re
from nltk.stem import PorterStemmer

stop = set(stopwords.words("portuguese")+
           ['em','sao','ao','de','da','do','para','c','co','kg','un','ml','pct','und','das','no','ou','pc','gr','pt','cm',
 'vd','com','sem','gfa','jg','la','1','2','3','4','5',
'6','7','8','9','0','a','b','c','d','e','lt','f','g',
'h','i','j','k','l','m','n','o','p','q','r','s','t',
'u','v','x','w','y','z','rt','RT','tô','tá','https','http','vc', 'hithheld'])

df_bolsonaro = pd.read_excel('bolsonaro_resultado_equilibrio5.xlsx', index_col=0)
df_bolsonaro.Texto = df_bolsonaro.Texto.astype(str)

text = " ".join(i for i in df_bolsonaro[df_bolsonaro['VotacaoPredict_norm']==1].Texto)
mask = np.array(Image.open("1.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("Bolsonaro_Cloud_positivo.png", format="png")
plt.show()

text = " ".join(i for i in df_bolsonaro[df_bolsonaro['VotacaoPredict_norm']==-1].Texto)
mask = np.array(Image.open("1.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("Bolsonaro_Cloud_negativo.png", format="png")
plt.show()

text = " ".join(i for i in df_bolsonaro[df_bolsonaro['VotacaoPredict_norm']==0].Texto)
mask = np.array(Image.open("1.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("Bolsonaro_Cloud_neutro.png", format="png")
plt.show()

df_lula = pd.read_excel('lula_resultado_equilibrio5.xlsx', index_col=0)
df_lula.Texto = df_lula.Texto.astype(str)

text = " ".join(i for i in df_lula[df_lula['VotacaoPredict_norm']==1].Texto)
mask = np.array(Image.open("2.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("lula_Cloud_positivo.png", format="png")
plt.show()

text = " ".join(i for i in df_lula[df_lula['VotacaoPredict_norm']==-1].Texto)
mask = np.array(Image.open("2.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("lula_Cloud_negativo.png", format="png")
plt.show()

text = " ".join(i for i in df_lula[df_lula['VotacaoPredict_norm']==0].Texto)
mask = np.array(Image.open("2.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("lula_Cloud_neutro.png", format="png")
plt.show()

df_simone = pd.read_excel('simone_resultado_equilibrio5.xlsx', index_col=0)
df_simone.Texto = df_simone.Texto.astype(str)

text = " ".join(i for i in df_simone[df_simone['VotacaoPredict_norm']==1].Texto)
mask = np.array(Image.open("3.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("simone_Cloud_positivo.png", format="png")
plt.show()

text = " ".join(i for i in df_simone[df_simone['VotacaoPredict_norm']==-1].Texto)
mask = np.array(Image.open("3.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("simone_Cloud_negativo.png", format="png")
plt.show()

text = " ".join(i for i in df_simone[df_simone['VotacaoPredict_norm']==0].Texto)
mask = np.array(Image.open("3.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("simone_Cloud_neutro.png", format="png")
plt.show()

df_ciro = pd.read_excel('ciro_resultado_equilibrio5.xlsx', index_col=0)
df_ciro.Texto = df_ciro.Texto.astype(str)

text = " ".join(i for i in df_ciro[df_ciro['VotacaoPredict_norm']==1].Texto)
mask = np.array(Image.open("4.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("ciro_Cloud_positivo.png", format="png")
plt.show()

text = " ".join(i for i in df_ciro[df_ciro['VotacaoPredict_norm']==-1].Texto)
mask = np.array(Image.open("4.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("ciro_Cloud_negativo.png", format="png")
plt.show()

text = " ".join(i for i in df_ciro[df_ciro['VotacaoPredict_norm']==0].Texto)
mask = np.array(Image.open("4.PNG"))
wordcloud = WordCloud(stopwords=stop, background_color="white", mode="RGBA", max_words=1000, mask=mask).generate(text)
image_colors = ImageColorGenerator(mask)
plt.figure( figsize=[20,20])
plt.imshow(wordcloud.recolor(color_func=image_colors), interpolation="bilinear")
plt.axis("off")
plt.savefig("ciro_Cloud_neutro.png", format="png")
plt.show()

horarios = sorted(df_bolsonaro['Data_post'].str[:13].unique())
cont1=[]
cont2=[]
cont3=[]

for horario in horarios:
    cont1.append(len(df_bolsonaro[(df_bolsonaro['Data_post'].str[:13]==horario)& (df_bolsonaro['VotacaoPredict_norm']==1)]))
    cont2.append(len(df_bolsonaro[(df_bolsonaro['Data_post'].str[:13]==horario)& (df_bolsonaro['VotacaoPredict_norm']==0)]))
    cont3.append(len(df_bolsonaro[(df_bolsonaro['Data_post'].str[:13]==horario)& (df_bolsonaro['VotacaoPredict_norm']==-1)]))
df_cont_horarios = pd.DataFrame(data={'positivo': cont1,
                   'neutro': cont2,
                  'negativo': cont3}, index=horarios)

df_cont_horarios.index = df_cont_horarios.index.str[5:]

df_cont_horarios.plot( figsize=(15, 10), color=['#00DE00','#000000','#BF0000'],marker='o', fontsize=16)
# print bar graph
plt.xticks(range(0,len(df_cont_horarios.index),22), df_cont_horarios.index.str[:5].unique())
plt.savefig("bolsonaro_comentarios_pnn.png", format="png")
plt.show()

horarios = sorted(df_lula['Data_post'].str[:13].unique())
cont1=[]
cont2=[]
cont3=[]

for horario in horarios:
    cont1.append(len(df_lula[(df_lula['Data_post'].str[:13]==horario)& (df_lula['VotacaoPredict_norm']==1)]))
    cont2.append(len(df_lula[(df_lula['Data_post'].str[:13]==horario)& (df_lula['VotacaoPredict_norm']==0)]))
    cont3.append(len(df_lula[(df_lula['Data_post'].str[:13]==horario)& (df_lula['VotacaoPredict_norm']==-1)]))
df_cont_horarios = pd.DataFrame(data={'positivo': cont1,
                   'neutro': cont2,
                  'negativo': cont3}, index=horarios)

df_cont_horarios.index = df_cont_horarios.index.str[5:]

df_cont_horarios.plot( figsize=(15, 10), color=['#00DE00','#000000','#BF0000'],marker='o', fontsize=16)
# print bar graph
plt.xticks(range(0,len(df_cont_horarios.index),22), df_cont_horarios.index.str[:5].unique())
plt.savefig("lula_comentarios_pnn.png", format="png")
plt.show()

horarios = sorted(df_simone['Data_post'].str[:13].unique())
cont1=[]
cont2=[]
cont3=[]

for horario in horarios:
    cont1.append(len(df_simone[(df_simone['Data_post'].str[:13]==horario)& (df_simone['VotacaoPredict_norm']==1)]))
    cont2.append(len(df_simone[(df_simone['Data_post'].str[:13]==horario)& (df_simone['VotacaoPredict_norm']==0)]))
    cont3.append(len(df_simone[(df_simone['Data_post'].str[:13]==horario)& (df_simone['VotacaoPredict_norm']==-1)]))
df_cont_horarios = pd.DataFrame(data={'positivo': cont1,
                   'neutro': cont2,
                  'negativo': cont3}, index=horarios)

df_cont_horarios.index = df_cont_horarios.index.str[5:]

df_cont_horarios.plot( figsize=(15, 10), color=['#00DE00','#000000','#BF0000'],marker='o', fontsize=16)
# print bar graph
plt.xticks(range(0,len(df_cont_horarios.index),22), df_cont_horarios.index.str[:5].unique())
plt.savefig("simone_comentarios_pnn.png", format="png")
plt.show()

horarios = sorted(df_ciro['Data_post'].str[:13].unique())
cont1=[]
cont2=[]
cont3=[]

for horario in horarios:
    cont1.append(len(df_ciro[(df_ciro['Data_post'].str[:13]==horario)& (df_ciro['VotacaoPredict_norm']==1)]))
    cont2.append(len(df_ciro[(df_ciro['Data_post'].str[:13]==horario)& (df_ciro['VotacaoPredict_norm']==0)]))
    cont3.append(len(df_ciro[(df_ciro['Data_post'].str[:13]==horario)& (df_ciro['VotacaoPredict_norm']==-1)]))
df_cont_horarios = pd.DataFrame(data={'positivo': cont1,
                   'neutro': cont2,
                  'negativo': cont3}, index=horarios)

df_cont_horarios.index = df_cont_horarios.index.str[5:]

df_cont_horarios.plot( figsize=(15, 10), color=['#00DE00','#000000','#BF0000'],marker='o', fontsize=16)
# print bar graph
plt.xticks(range(0,len(df_cont_horarios.index),22), df_cont_horarios.index.str[:5].unique())
plt.savefig("ciro_comentarios_pnn.png", format="png")
plt.show()