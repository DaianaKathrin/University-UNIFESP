# -*- coding: utf-8 -*-
"""ModelosML_Tecnica5.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1NJvZG3q5zLQqIo1Z6V1qVBtxUOrQvHvh

# Importando bases
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import GaussianNB
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import confusion_matrix
from sklearn.metrics import accuracy_score
from sklearn.metrics import precision_score
from sklearn.metrics import recall_score
from sklearn.metrics import f1_score
from sklearn.neighbors import KNeighborsClassifier

df_bolsonaro_train = pd.read_excel('Bolsonaro_treino_sem_stop2.xlsx')  
df_lula_train = pd.read_excel('Lula_treino_sem_stop2.xlsx') 
df_simone_train = pd.read_excel('Simone_treino_sem_stop2.xlsx') 
df_ciro_train = pd.read_excel('Ciro_treino_sem_stop2.xlsx')

df_bolsonaro = pd.read_excel('Bolsonaro_todos_sem_stop.xlsx', index_col=0)
df_lula = pd.read_excel('Lula_todos_sem_stop.xlsx', index_col=0)
df_simone = pd.read_excel('Simone_todos_sem_stop.xlsx', index_col=0)
df_ciro = pd.read_excel('Ciro_todos_sem_stop.xlsx', index_col=0)

df_lula_train = df_lula_train[df_lula_train['Sentimento']!=' ']

print(df_lula_train['Sentimento'].value_counts())
print(df_bolsonaro_train['Sentimento'].value_counts())
print(df_simone_train['Sentimento'].value_counts())
print(df_ciro_train['Sentimento'].value_counts())

def train_test_under(df):
    tamanho = df['Sentimento'].value_counts()[2]-5
    
    df_train = df[df['Sentimento']=='p'].sample(n = 100 if len(df[df['Sentimento']=='p'])>100 else len(df[df['Sentimento']=='p']))
    df_train = df_train.append(df[df['Sentimento']=='n'].sample(n = 100 if len(df[df['Sentimento']=='n'])>100 else len(df[df['Sentimento']=='n'])))
    df_train = df_train.append(df[df['Sentimento']=='x'].sample(n = 100 if len(df[df['Sentimento']=='x'])>100 else len(df[df['Sentimento']=='x'])))
    
    df_teste = df.drop(df_train.index)
    
    X_bw_train, bw = Bag_of_words(df_train)
    X_tfidf_train, tfidf = tfidf(df_train)
    Y_train = df_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
    
    X_bw_teste = Bag_of_words_teste(df_teste, bw )
    X_tfidf_teste = tfidf_teste(df_teste, tfidf)
    Y_teste = df_teste['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
    
    return X_bw_train, X_tfidf_train, Y_train, X_bw_teste, X_tfidf_teste, Y_teste, bw, tfidf, df_train, df_teste

# Bag Of Words

def Bag_of_words(df):
    matrix = CountVectorizer()
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.fit_transform(text)
    return X, matrix

def Bag_of_words_teste(df, matrix):
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.transform(text)
    return X

def tfidf_(df):
    matrix = TfidfVectorizer()
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.fit_transform(text)
    return X, matrix

def tfidf_teste(df, matrix):
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.transform(text)
    return X

def train_test_under_bw(df):
    tamanho = df['Sentimento'].value_counts()[2]-2
    
    df_train = df[df['Sentimento']=='p'].sample(n = tamanho)
    df_train = df_train.append(df[df['Sentimento']=='n'].sample(n = tamanho))
    df_train = df_train.append(df[df['Sentimento']=='x'].sample(n = tamanho))
    
    df_teste = df.drop(df_train.index)
    
    X_bw_train, bw = Bag_of_words(df_train)
    Y_train = df_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
    
    X_bw_teste = Bag_of_words_teste(df_teste, bw )
    
    Y_teste = df_teste['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
    
    return X_bw_train, Y_train, X_bw_teste, Y_teste, bw, df_train, df_teste

def train_test_under_tfidf(df):
    tamanho = df['Sentimento'].value_counts()[2]-2
    
    df_train = df[df['Sentimento']=='p'].sample(n = tamanho)
    df_train = df_train.append(df[df['Sentimento']=='n'].sample(n = tamanho))
    df_train = df_train.append(df[df['Sentimento']=='x'].sample(n = tamanho))
    
    df_teste = df.drop(df_train.index)
    
    X_tfidf_train, tfidf = tfidf_(df_train)
    Y_train = df_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
    
    X_tfidf_teste = tfidf_teste(df_teste, tfidf)
    Y_teste = df_teste['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
    
    return X_tfidf_train, Y_train, X_tfidf_teste, Y_teste, tfidf, df_train, df_teste

def train_model_bw(model, df_train_tudo, num_tests):
    X_train, Y_train, X_teste, Y_teste, bw, df_train, df_teste = train_test_under_bw(df_train_tudo)
    
    model2 = model.fit(X_train.toarray(), Y_train)
    predict = model2.predict(X_teste.toarray())
    accuracy = accuracy_score(Y_teste, predict)
    precision = precision_score(Y_teste, predict, average='macro')
    recall = recall_score(Y_teste, predict, average='macro')
    f1 = f1_score(Y_teste, predict, average='macro')
    score = accuracy + precision + recall + f1
    
    matrix_confusion = confusion_matrix(Y_teste, predict,labels=[-1, 0, 1])
    
    errados = matrix_confusion[0][2]+ matrix_confusion[2][0]
    
    model2_fim, bw_fim, df_train_fim, df_teste_fim, score_fim, errados_fim = model2, bw, df_train, df_teste, score, errados
    for i in range(0,num_tests):
        X_train, Y_train, X_teste, Y_teste, bw, df_train, df_teste = train_test_under_bw(df_train_tudo)

        model2 = model.fit(X_train.toarray(), Y_train)
        predict = model2.predict(X_teste.toarray())
        accuracy = accuracy_score(Y_teste, predict)
        precision = precision_score(Y_teste, predict, average='macro')
        recall = recall_score(Y_teste, predict, average='macro')
        f1 = f1_score(Y_teste, predict, average='macro')
        score = accuracy + precision + recall + f1

        matrix_confusion = confusion_matrix(Y_teste, predict,labels=[-1, 0, 1])
        accuracy_fim, precision_fim,recall_fim, f1_fim, matrix_confusion_fim = accuracy, precision,recall,f1,matrix_confusion 
        errados = matrix_confusion[0][2]+ matrix_confusion[2][0]
        
        if((score_fim<score) & (errados_fim>errados)):
            accuracy_fim, precision_fim,recall_fim, f1_fim, matrix_confusion_fim = accuracy, precision,recall,f1,matrix_confusion 
            model2_fim, bw_fim, df_train_fim, df_teste_fim, score_fim, errados_fim = model2, bw, df_train, df_teste, score, errados
    
    print('accuracy:')
    print(accuracy_fim)
    print('precision:')
    print(precision_fim)
    print('recall:')
    print(recall_fim)
    print('f1:')
    print(f1_fim)
    print('matrix_confusion:')
    print(matrix_confusion_fim)
    print(score_fim/4)
    print(errados_fim)
    return model2_fim, bw_fim, df_train_fim, df_teste_fim     
    
def train_model_tfidf(model, df_train_tudo, num_tests):
    X_train, Y_train, X_teste, Y_teste, tfidf, df_train, df_teste = train_test_under_tfidf(df_train_tudo)
    
    model2 = model.fit(X_train.toarray(), Y_train)
    predict = model2.predict(X_teste.toarray())
    accuracy = accuracy_score(Y_teste, predict)
    precision = precision_score(Y_teste, predict, average='macro')
    recall = recall_score(Y_teste, predict, average='macro')
    f1 = f1_score(Y_teste, predict, average='macro')
    score = accuracy + precision + recall + f1
    
    matrix_confusion = confusion_matrix(Y_teste, predict,labels=[-1, 0, 1])
    accuracy_fim, precision_fim,recall_fim, f1_fim, matrix_confusion_fim = accuracy, precision,recall,f1,matrix_confusion 
    errados = matrix_confusion[0][2]+ matrix_confusion[2][0]
    
    model2_fim, tfidf_fim, df_train_fim, df_teste_fim, score_fim, errados_fim = model2, tfidf, df_train, df_teste, score, errados
    for i in range(0,num_tests):
        X_train, Y_train, X_teste, Y_teste, tfidf, df_train, df_teste = train_test_under_tfidf(df_train_tudo)

        model2 = model.fit(X_train.toarray(), Y_train)
        predict = model2.predict(X_teste.toarray())
        accuracy = accuracy_score(Y_teste, predict)
        precision = precision_score(Y_teste, predict, average='macro')
        recall = recall_score(Y_teste, predict, average='macro')
        f1 = f1_score(Y_teste, predict, average='macro')
        score = accuracy + precision + recall + f1

        matrix_confusion = confusion_matrix(Y_teste, predict,labels=[-1, 0, 1])

        errados = matrix_confusion[0][2]+ matrix_confusion[2][0]
        
        if((score_fim<score) & (errados_fim>errados)):
            accuracy_fim, precision_fim,recall_fim, f1_fim, matrix_confusion_fim = accuracy, precision,recall,f1,matrix_confusion 
            model2_fim, tfidf_fim, df_train_fim, df_teste_fim, score_fim, errados_fim = model2, tfidf, df_train, df_teste, score, errados
    
    print('accuracy:')
    print(accuracy_fim)
    print('precision:')
    print(precision_fim)
    print('recall:')
    print(recall_fim)
    print('f1:')
    print(f1_fim)
    print('matrix_confusion:')
    print(matrix_confusion_fim)
    print(score_fim/4)
    print(errados_fim)
    return model2_fim, tfidf_fim, df_train_fim, df_teste_fim  

def AnaliseSentimentos_bw(df, bw,model, name_colum):
    i1=0
    for i in range(5000,len(df),5000):
        if (i==5000):
            predict = model.predict(Bag_of_words_teste(df[i1:i], bw).toarray())
        else:
            predict = np.append(predict, model.predict(Bag_of_words_teste(df[i1:i], bw).toarray()))
        i1=i
        
    predict = np.append(predict,model.predict(Bag_of_words_teste(df[i1:], bw).toarray()))

    df[name_colum] = predict

    print(np.unique(predict, return_counts=True))
    return df

def AnaliseSentimentos_tfidf(df, tfidf,model, name_colum):
    i1=0
    for i in range(5000,len(df),5000):
        if (i==5000):
            predict = model.predict(tfidf_teste(df[i1:i], tfidf).toarray())
        else:
            predict = np.append(predict, model.predict(tfidf_teste(df[i1:i], tfidf).toarray()))
        i1=i
        
    predict = np.append(predict,model.predict(tfidf_teste(df[i1:], tfidf).toarray()))

    df[name_colum] = predict

    print(np.unique(predict, return_counts=True))
    return df

"""## Bolsonaro

### Bolsonaro - Arvore de Decisao - bw
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_bolsonaro_bw, tree_bolsonaro_bw, df_train_tree_bolsonaro_bw, df_teste_tree_bolsonaro_bw = \
# train_model_bw(tree.DecisionTreeClassifier(), df_bolsonaro_train, 100)
# model_tree_bolsonaro_bw = model_tree_bolsonaro_bw.fit(Bag_of_words_teste(df_train_tree_bolsonaro_bw, tree_bolsonaro_bw), df_train_tree_bolsonaro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_bw(df_bolsonaro, tree_bolsonaro_bw,model_tree_bolsonaro_bw, 'predict_bw_ArvoreDeDecisao')
#

"""### Bolsonaro - Arvore de Decisao - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_bolsonaro_tfidf, tree_bolsonaro_tfidf, df_train_tree_bolsonaro_tfidf, df_teste_tree_bolsonaro_tfidf = \
# train_model_tfidf(tree.DecisionTreeClassifier(), df_bolsonaro_train, 100)
# model_tree_bolsonaro_tfidf = model_tree_bolsonaro_tfidf.fit(tfidf_teste(df_train_tree_bolsonaro_tfidf, tree_bolsonaro_tfidf), df_train_tree_bolsonaro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_tfidf(df_bolsonaro, tree_bolsonaro_tfidf,model_tree_bolsonaro_tfidf, 'predict_tfidf_ArvoreDeDecisao')
#

"""### Bolsonaro - Naive Bayes - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_bolsonaro_bw, nb_bolsonaro_bw, df_train_nb_bolsonaro_bw, df_teste_nb_bolsonaro_bw = \
# train_model_bw(GaussianNB(), df_bolsonaro_train, 100)
# model_nb_bolsonaro_bw = model_nb_bolsonaro_bw.fit(Bag_of_words_teste(df_train_nb_bolsonaro_bw, nb_bolsonaro_bw).toarray(), df_train_nb_bolsonaro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_bw(df_bolsonaro, nb_bolsonaro_bw,model_nb_bolsonaro_bw, 'predict_bw_NaiveBayes')
#

"""### Bolsonaro - Naive Bayes - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_bolsonaro_tfidf, nb_bolsonaro_tfidf, df_train_nb_bolsonaro_tfidf, df_teste_nb_bolsonaro_tfidf = \
# train_model_tfidf(GaussianNB(), df_bolsonaro_train, 100)
# model_nb_bolsonaro_tfidf = model_nb_bolsonaro_tfidf.fit(tfidf_teste(df_train_nb_bolsonaro_tfidf, nb_bolsonaro_tfidf).toarray(), df_train_nb_bolsonaro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_tfidf(df_bolsonaro, nb_bolsonaro_tfidf,model_nb_bolsonaro_tfidf, 'predict_tfidf_NaiveBayes')
#

"""### Bolsonaro - Random Forest - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_bolsonaro_bw, RandomForest_bolsonaro_bw, df_train_RandomForest_bolsonaro_bw, df_teste_RandomForest_bolsonaro_bw = \
# train_model_bw(RandomForestClassifier(), df_bolsonaro_train, 100)
# model_RandomForest_bolsonaro_bw = model_RandomForest_bolsonaro_bw.fit(Bag_of_words_teste(df_train_RandomForest_bolsonaro_bw, RandomForest_bolsonaro_bw).toarray(), df_train_RandomForest_bolsonaro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_bw(df_bolsonaro, RandomForest_bolsonaro_bw,model_RandomForest_bolsonaro_bw, 'predict_bw_RandomForest')
#

"""### Bolsonaro - Random Forest - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_bolsonaro_tfidf, RandomForest_bolsonaro_tfidf, df_train_RandomForest_bolsonaro_tfidf, df_teste_RandomForest_bolsonaro_tfidf = \
# train_model_tfidf(RandomForestClassifier(), df_bolsonaro_train, 100)
# model_RandomForest_bolsonaro_tfidf = model_RandomForest_bolsonaro_tfidf.fit(tfidf_teste(df_train_RandomForest_bolsonaro_tfidf, RandomForest_bolsonaro_tfidf).toarray(), df_train_RandomForest_bolsonaro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_tfidf(df_bolsonaro, RandomForest_bolsonaro_tfidf,model_RandomForest_bolsonaro_tfidf, 'predict_tfidf_RandomForest')
#

"""### Bolsonaro - SVM - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_bolsonaro_bw, svc_bolsonaro_bw, df_train_svc_bolsonaro_bw, df_teste_svc_bolsonaro_bw = \
# train_model_bw(LinearSVC(), df_bolsonaro_train, 100)
# model_svc_bolsonaro_bw = model_svc_bolsonaro_bw.fit(Bag_of_words_teste(df_train_svc_bolsonaro_bw, svc_bolsonaro_bw).toarray(), df_train_svc_bolsonaro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_bw(df_bolsonaro, svc_bolsonaro_bw,model_svc_bolsonaro_bw, 'predict_bw_SVM')

"""### Bolsonaro - SVM - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_bolsonaro_tfidf, svc_bolsonaro_tfidf, df_train_svc_bolsonaro_tfidf, df_teste_svc_bolsonaro_tfidf = \
# train_model_tfidf(LinearSVC(), df_bolsonaro_train, 100)
# model_svc_bolsonaro_tfidf = model_svc_bolsonaro_tfidf.fit(tfidf_teste(df_train_svc_bolsonaro_tfidf, svc_bolsonaro_tfidf).toarray(), df_train_svc_bolsonaro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_tfidf(df_bolsonaro, svc_bolsonaro_tfidf,model_svc_bolsonaro_tfidf, 'predict_tfidf_SVM')

"""### Bolsonaro - MLP - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_bolsonaro_bw, mlp_bolsonaro_bw, df_train_mlp_bolsonaro_bw, df_teste_mlp_bolsonaro_bw = \
# train_model_bw(MLPClassifier(max_iter=400), df_bolsonaro_train, 100)
# model_mlp_bolsonaro_bw = model_mlp_bolsonaro_bw.fit(Bag_of_words_teste(df_train_mlp_bolsonaro_bw, mlp_bolsonaro_bw).toarray(), df_train_mlp_bolsonaro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_bw(df_bolsonaro, mlp_bolsonaro_bw,model_mlp_bolsonaro_bw, 'predict_bw_MLP')

"""### Bolsonaro - MLP - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_bolsonaro_tfidf, mlp_bolsonaro_tfidf, df_train_mlp_bolsonaro_tfidf, df_teste_mlp_bolsonaro_tfidf = \
# train_model_tfidf(MLPClassifier(max_iter=400), df_bolsonaro_train, 100)
# model_mlp_bolsonaro_tfidf = model_mlp_bolsonaro_tfidf.fit(Bag_of_words_teste(df_train_mlp_bolsonaro_tfidf, mlp_bolsonaro_tfidf).toarray(), df_train_mlp_bolsonaro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_tfidf(df_bolsonaro, mlp_bolsonaro_tfidf,model_mlp_bolsonaro_tfidf, 'predict_tfidf_MLP')

"""### Bolsonaro - KNN - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_bolsonaro_bw, knn_bolsonaro_bw, df_train_knn_bolsonaro_bw, df_teste_knn_bolsonaro_bw = \
# train_model_bw(KNeighborsClassifier(), df_bolsonaro_train, 100)
# model_knn_bolsonaro_bw = model_knn_bolsonaro_bw.fit(Bag_of_words_teste(df_train_knn_bolsonaro_bw, knn_bolsonaro_bw).toarray(), df_train_knn_bolsonaro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_bw(df_bolsonaro, knn_bolsonaro_bw,model_knn_bolsonaro_bw, 'predict_bw_KNN')

"""### Bolsonaro - KNN - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_bolsonaro_tfidf, knn_bolsonaro_tfidf, df_train_knn_bolsonaro_tfidf, df_teste_knn_bolsonaro_tfidf = \
# train_model_tfidf(KNeighborsClassifier(), df_bolsonaro_train, 100)
# model_knn_bolsonaro_tfidf = model_knn_bolsonaro_tfidf.fit(Bag_of_words_teste(df_train_knn_bolsonaro_tfidf, knn_bolsonaro_tfidf).toarray(), df_train_knn_bolsonaro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_bolsonaro = AnaliseSentimentos_tfidf(df_bolsonaro, knn_bolsonaro_tfidf,model_knn_bolsonaro_tfidf, 'predict_tfidf_KNN')

"""# Lula

### Lula - Arvore de Decisao - bw
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_lula_bw, tree_lula_bw, df_train_tree_lula_bw, df_teste_tree_lula_bw = \
# train_model_bw(tree.DecisionTreeClassifier(), df_lula_train, 100)
# model_tree_lula_bw = model_tree_lula_bw.fit(Bag_of_words_teste(df_train_tree_lula_bw, tree_lula_bw), df_train_tree_lula_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_bw(df_lula, tree_lula_bw,model_tree_lula_bw, 'predict_bw_ArvoreDeDecisao')
#

"""### Lula - Arvore de Decisao - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_lula_tfidf, tree_lula_tfidf, df_train_tree_lula_tfidf, df_teste_tree_lula_tfidf = \
# train_model_tfidf(tree.DecisionTreeClassifier(), df_lula_train, 100)
# model_tree_lula_tfidf = model_tree_lula_tfidf.fit(tfidf_teste(df_train_tree_lula_tfidf, tree_lula_tfidf), df_train_tree_lula_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_tfidf(df_lula, tree_lula_tfidf,model_tree_lula_tfidf, 'predict_tfidf_ArvoreDeDecisao')
#

"""### Lula - Naive Bayes - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_lula_bw, nb_lula_bw, df_train_nb_lula_bw, df_teste_nb_lula_bw = \
# train_model_bw(GaussianNB(), df_lula_train, 100)
# model_nb_lula_bw = model_nb_lula_bw.fit(Bag_of_words_teste(df_train_nb_lula_bw, nb_lula_bw).toarray(), df_train_nb_lula_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_bw(df_lula, nb_lula_bw,model_nb_lula_bw, 'predict_bw_NaiveBayes')
#

"""### Lula - Naive Bayes - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_lula_tfidf, nb_lula_tfidf, df_train_nb_lula_tfidf, df_teste_nb_lula_tfidf = \
# train_model_tfidf(GaussianNB(), df_lula_train, 100)
# model_nb_lula_tfidf = model_nb_lula_tfidf.fit(tfidf_teste(df_train_nb_lula_tfidf, nb_lula_tfidf).toarray(), df_train_nb_lula_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_tfidf(df_lula, nb_lula_tfidf,model_nb_lula_tfidf, 'predict_tfidf_NaiveBayes')
#

"""### Lula - Random Forest - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_lula_bw, RandomForest_lula_bw, df_train_RandomForest_lula_bw, df_teste_RandomForest_lula_bw = \
# train_model_bw(RandomForestClassifier(), df_lula_train, 100)
# model_RandomForest_lula_bw = model_RandomForest_lula_bw.fit(Bag_of_words_teste(df_train_RandomForest_lula_bw, RandomForest_lula_bw).toarray(), df_train_RandomForest_lula_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_bw(df_lula, RandomForest_lula_bw,model_RandomForest_lula_bw, 'predict_bw_RandomForest')
#

"""### Lula - Random Forest - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_lula_tfidf, RandomForest_lula_tfidf, df_train_RandomForest_lula_tfidf, df_teste_RandomForest_lula_tfidf = \
# train_model_tfidf(RandomForestClassifier(), df_lula_train, 100)
# model_RandomForest_lula_tfidf = model_RandomForest_lula_tfidf.fit(tfidf_teste(df_train_RandomForest_lula_tfidf, RandomForest_lula_tfidf).toarray(), df_train_RandomForest_lula_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_tfidf(df_lula, RandomForest_lula_tfidf,model_RandomForest_lula_tfidf, 'predict_tfidf_RandomForest')
#

"""### lula - SVM - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_lula_bw, svc_lula_bw, df_train_svc_lula_bw, df_teste_svc_lula_bw = \
# train_model_bw(LinearSVC(), df_lula_train, 100)
# model_svc_lula_bw = model_svc_lula_bw.fit(Bag_of_words_teste(df_train_svc_lula_bw, svc_lula_bw).toarray(), df_train_svc_lula_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_bw(df_lula, svc_lula_bw,model_svc_lula_bw, 'predict_bw_SVM')

"""### lula - SVM - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_lula_tfidf, svc_lula_tfidf, df_train_svc_lula_tfidf, df_teste_svc_lula_tfidf = \
# train_model_tfidf(LinearSVC(), df_lula_train, 100)
# model_svc_lula_tfidf = model_svc_lula_tfidf.fit(tfidf_teste(df_train_svc_lula_tfidf, svc_lula_tfidf).toarray(), df_train_svc_lula_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_tfidf(df_lula, svc_lula_tfidf,model_svc_lula_tfidf, 'predict_tfidf_SVM')

"""### Lula - MLP - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_lula_bw, mlp_lula_bw, df_train_mlp_lula_bw, df_teste_mlp_lula_bw = \
# train_model_bw(MLPClassifier(max_iter=400), df_lula_train, 100)
# model_mlp_lula_bw = model_mlp_lula_bw.fit(Bag_of_words_teste(df_train_mlp_lula_bw, mlp_lula_bw).toarray(), df_train_mlp_lula_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_bw(df_lula, mlp_lula_bw,model_mlp_lula_bw, 'predict_bw_MLP')

"""### Lula - MLP - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_lula_tfidf, mlp_lula_tfidf, df_train_mlp_lula_tfidf, df_teste_mlp_lula_tfidf = \
# train_model_tfidf(MLPClassifier(max_iter=400), df_lula_train, 100)
# model_mlp_lula_tfidf = model_mlp_lula_tfidf.fit(Bag_of_words_teste(df_train_mlp_lula_tfidf, mlp_lula_tfidf).toarray(), df_train_mlp_lula_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_tfidf(df_lula, mlp_lula_tfidf,model_mlp_lula_tfidf, 'predict_tfidf_MLP')

"""### Lula - KNN - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_lula_bw, knn_lula_bw, df_train_knn_lula_bw, df_teste_knn_lula_bw = \
# train_model_bw(KNeighborsClassifier(), df_lula_train, 100)
# model_knn_lula_bw = model_knn_lula_bw.fit(Bag_of_words_teste(df_train_knn_lula_bw, knn_lula_bw).toarray(), df_train_knn_lula_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_bw(df_lula, knn_lula_bw,model_knn_lula_bw, 'predict_bw_KNN')

"""### Lula - KNN - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_lula_tfidf, knn_lula_tfidf, df_train_knn_lula_tfidf, df_teste_knn_lula_tfidf = \
# train_model_tfidf(KNeighborsClassifier(), df_lula_train, 100)
# model_knn_lula_tfidf = model_knn_lula_tfidf.fit(Bag_of_words_teste(df_train_knn_lula_tfidf, knn_lula_tfidf).toarray(), df_train_knn_lula_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_lula = AnaliseSentimentos_tfidf(df_lula, knn_lula_tfidf,model_knn_lula_tfidf, 'predict_tfidf_KNN')

"""# Simone

### Simone - Arvore de Decisao - bw
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_simone_bw, tree_simone_bw, df_train_tree_simone_bw, df_teste_tree_simone_bw = \
# train_model_bw(tree.DecisionTreeClassifier(), df_simone_train, 100)
# model_tree_simone_bw = model_tree_simone_bw.fit(Bag_of_words_teste(df_train_tree_simone_bw, tree_simone_bw), df_train_tree_simone_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_bw(df_simone, tree_simone_bw,model_tree_simone_bw, 'predict_bw_ArvoreDeDecisao')
#

"""### Simone - Arvore de Decisao - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_simone_tfidf, tree_simone_tfidf, df_train_tree_simone_tfidf, df_teste_tree_simone_tfidf = \
# train_model_tfidf(tree.DecisionTreeClassifier(), df_simone_train, 100)
# model_tree_simone_tfidf = model_tree_simone_tfidf.fit(tfidf_teste(df_train_tree_simone_tfidf, tree_simone_tfidf), df_train_tree_simone_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_tfidf(df_simone, tree_simone_tfidf,model_tree_simone_tfidf, 'predict_tfidf_ArvoreDeDecisao')
#

"""### Simone - Naive Bayes - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_simone_bw, nb_simone_bw, df_train_nb_simone_bw, df_teste_nb_simone_bw = \
# train_model_bw(GaussianNB(), df_simone_train, 100)
# model_nb_simone_bw = model_nb_simone_bw.fit(Bag_of_words_teste(df_train_nb_simone_bw, nb_simone_bw).toarray(), df_train_nb_simone_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_bw(df_simone, nb_simone_bw,model_nb_simone_bw, 'predict_bw_NaiveBayes')
#

"""### Simone - Naive Bayes - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_simone_tfidf, nb_simone_tfidf, df_train_nb_simone_tfidf, df_teste_nb_simone_tfidf = \
# train_model_tfidf(GaussianNB(), df_simone_train, 100)
# model_nb_simone_tfidf = model_nb_simone_tfidf.fit(tfidf_teste(df_train_nb_simone_tfidf, nb_simone_tfidf).toarray(), df_train_nb_simone_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_tfidf(df_simone, nb_simone_tfidf,model_nb_simone_tfidf, 'predict_tfidf_NaiveBayes')
#

"""### Simone - Random Forest - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_simone_bw, RandomForest_simone_bw, df_train_RandomForest_simone_bw, df_teste_RandomForest_simone_bw = \
# train_model_bw(RandomForestClassifier(), df_simone_train, 100)
# model_RandomForest_simone_bw = model_RandomForest_simone_bw.fit(Bag_of_words_teste(df_train_RandomForest_simone_bw, RandomForest_simone_bw).toarray(), df_train_RandomForest_simone_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_bw(df_simone, RandomForest_simone_bw,model_RandomForest_simone_bw, 'predict_bw_RandomForest')
#

"""### Simone - Random Forest - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_simone_tfidf, RandomForest_simone_tfidf, df_train_RandomForest_simone_tfidf, df_teste_RandomForest_simone_tfidf = \
# train_model_tfidf(RandomForestClassifier(), df_simone_train, 100)
# model_RandomForest_simone_tfidf = model_RandomForest_simone_tfidf.fit(tfidf_teste(df_train_RandomForest_simone_tfidf, RandomForest_simone_tfidf).toarray(), df_train_RandomForest_simone_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_tfidf(df_simone, RandomForest_simone_tfidf,model_RandomForest_simone_tfidf, 'predict_tfidf_RandomForest')
#

"""### Simone - SVM - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_simone_bw, svc_simone_bw, df_train_svc_simone_bw, df_teste_svc_simone_bw = \
# train_model_bw(LinearSVC(), df_simone_train, 100)
# model_svc_simone_bw = model_svc_simone_bw.fit(Bag_of_words_teste(df_train_svc_simone_bw, svc_simone_bw).toarray(), df_train_svc_simone_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_bw(df_simone, svc_simone_bw,model_svc_simone_bw, 'predict_bw_SVM')

"""### Simone - SVM - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_simone_tfidf, svc_simone_tfidf, df_train_svc_simone_tfidf, df_teste_svc_simone_tfidf = \
# train_model_tfidf(LinearSVC(), df_simone_train, 100)
# model_svc_simone_tfidf = model_svc_simone_tfidf.fit(tfidf_teste(df_train_svc_simone_tfidf, svc_simone_tfidf).toarray(), df_train_svc_simone_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_tfidf(df_simone, svc_simone_tfidf,model_svc_simone_tfidf, 'predict_tfidf_SVM')

"""### Simone - MLP - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_simone_bw, mlp_simone_bw, df_train_mlp_simone_bw, df_teste_mlp_simone_bw = \
# train_model_bw(MLPClassifier(max_iter=400), df_simone_train, 100)
# model_mlp_simone_bw = model_mlp_simone_bw.fit(Bag_of_words_teste(df_train_mlp_simone_bw, mlp_simone_bw).toarray(), df_train_mlp_simone_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_bw(df_simone, mlp_simone_bw,model_mlp_simone_bw, 'predict_bw_MLP')

"""### Simone - MLP - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_simone_tfidf, mlp_simone_tfidf, df_train_mlp_simone_tfidf, df_teste_mlp_simone_tfidf = \
# train_model_tfidf(MLPClassifier(max_iter=400), df_simone_train, 100)
# model_mlp_simone_tfidf = model_mlp_simone_tfidf.fit(Bag_of_words_teste(df_train_mlp_simone_tfidf, mlp_simone_tfidf).toarray(), df_train_mlp_simone_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_tfidf(df_simone, mlp_simone_tfidf,model_mlp_simone_tfidf, 'predict_tfidf_MLP')

"""### Simone - KNN - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_simone_bw, knn_simone_bw, df_train_knn_simone_bw, df_teste_knn_simone_bw = \
# train_model_bw(KNeighborsClassifier(), df_simone_train, 100)
# model_knn_simone_bw = model_knn_simone_bw.fit(Bag_of_words_teste(df_train_knn_simone_bw, knn_simone_bw).toarray(), df_train_knn_simone_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_bw(df_simone, knn_simone_bw,model_knn_simone_bw, 'predict_bw_KNN')

"""### Simone - KNN - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_simone_tfidf, knn_simone_tfidf, df_train_knn_simone_tfidf, df_teste_knn_simone_tfidf = \
# train_model_tfidf(KNeighborsClassifier(), df_simone_train, 100)
# model_knn_simone_tfidf = model_knn_simone_tfidf.fit(Bag_of_words_teste(df_train_knn_simone_tfidf, knn_simone_tfidf).toarray(), df_train_knn_simone_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_simone = AnaliseSentimentos_tfidf(df_simone, knn_simone_tfidf,model_knn_simone_tfidf, 'predict_tfidf_KNN')

"""# Ciro

### Ciro - Arvore de Decisao - bw
"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_ciro_bw, tree_ciro_bw, df_train_tree_ciro_bw, df_teste_tree_ciro_bw = \
# train_model_bw(tree.DecisionTreeClassifier(), df_ciro_train, 100)
# model_tree_ciro_bw = model_tree_ciro_bw.fit(Bag_of_words_teste(df_train_tree_ciro_bw, tree_ciro_bw), df_train_tree_ciro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_bw(df_ciro, tree_ciro_bw,model_tree_ciro_bw, 'predict_bw_ArvoreDeDecisao')
#

"""### Ciro - Arvore de Decisao - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_tree_ciro_tfidf, tree_ciro_tfidf, df_train_tree_ciro_tfidf, df_teste_tree_ciro_tfidf = \
# train_model_tfidf(tree.DecisionTreeClassifier(), df_ciro_train, 100)
# model_tree_ciro_tfidf = model_tree_ciro_tfidf.fit(tfidf_teste(df_train_tree_ciro_tfidf, tree_ciro_tfidf), df_train_tree_ciro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_tfidf(df_ciro, tree_ciro_tfidf,model_tree_ciro_tfidf, 'predict_tfidf_ArvoreDeDecisao')
#

"""### Ciro - Naive Bayes - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_ciro_bw, nb_ciro_bw, df_train_nb_ciro_bw, df_teste_nb_ciro_bw = \
# train_model_bw(GaussianNB(), df_ciro_train, 100)
# model_nb_ciro_bw = model_nb_ciro_bw.fit(Bag_of_words_teste(df_train_nb_ciro_bw, nb_ciro_bw).toarray(), df_train_nb_ciro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_bw(df_ciro, nb_ciro_bw,model_nb_ciro_bw, 'predict_bw_NaiveBayes')
#

"""### Ciro - Naive Bayes - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_nb_ciro_tfidf, nb_ciro_tfidf, df_train_nb_ciro_tfidf, df_teste_nb_ciro_tfidf = \
# train_model_tfidf(GaussianNB(), df_ciro_train, 100)
# model_nb_ciro_tfidf = model_nb_ciro_tfidf.fit(tfidf_teste(df_train_nb_ciro_tfidf, nb_ciro_tfidf).toarray(), df_train_nb_ciro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_tfidf(df_ciro, nb_ciro_tfidf,model_nb_ciro_tfidf, 'predict_tfidf_NaiveBayes')
#

"""### Ciro - Random Forest - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_ciro_bw, RandomForest_ciro_bw, df_train_RandomForest_ciro_bw, df_teste_RandomForest_ciro_bw = \
# train_model_bw(RandomForestClassifier(), df_ciro_train, 100)
# model_RandomForest_ciro_bw = model_RandomForest_ciro_bw.fit(Bag_of_words_teste(df_train_RandomForest_ciro_bw, RandomForest_ciro_bw).toarray(), df_train_RandomForest_ciro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_bw(df_ciro, RandomForest_ciro_bw,model_RandomForest_ciro_bw, 'predict_bw_RandomForest')
#

"""### Ciro - Random Forest - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_RandomForest_ciro_tfidf, RandomForest_ciro_tfidf, df_train_RandomForest_ciro_tfidf, df_teste_RandomForest_ciro_tfidf = \
# train_model_tfidf(RandomForestClassifier(), df_ciro_train, 100)
# model_RandomForest_ciro_tfidf = model_RandomForest_ciro_tfidf.fit(tfidf_teste(df_train_RandomForest_ciro_tfidf, RandomForest_ciro_tfidf).toarray(), df_train_RandomForest_ciro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_tfidf(df_ciro, RandomForest_ciro_tfidf,model_RandomForest_ciro_tfidf, 'predict_tfidf_RandomForest')
#

"""### Ciro - SVM - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_ciro_bw, svc_ciro_bw, df_train_svc_ciro_bw, df_teste_svc_ciro_bw = \
# train_model_bw(LinearSVC(), df_ciro_train, 100)
# model_svc_ciro_bw = model_svc_ciro_bw.fit(Bag_of_words_teste(df_train_svc_ciro_bw, svc_ciro_bw).toarray(), df_train_svc_ciro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_bw(df_ciro, svc_ciro_bw,model_svc_ciro_bw, 'predict_bw_SVM')

"""### Ciro - SVM - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_svc_ciro_tfidf, svc_ciro_tfidf, df_train_svc_ciro_tfidf, df_teste_svc_ciro_tfidf = \
# train_model_tfidf(LinearSVC(), df_ciro_train, 100)
# model_svc_ciro_tfidf = model_svc_ciro_tfidf.fit(tfidf_teste(df_train_svc_ciro_tfidf, svc_ciro_tfidf).toarray(), df_train_svc_ciro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_tfidf(df_ciro, svc_ciro_tfidf,model_svc_ciro_tfidf, 'predict_tfidf_SVM')

"""### Ciro - MLP - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_ciro_bw, mlp_ciro_bw, df_train_mlp_ciro_bw, df_teste_mlp_ciro_bw = \
# train_model_bw(MLPClassifier(max_iter=400), df_ciro_train, 100)
# model_mlp_ciro_bw = model_mlp_ciro_bw.fit(Bag_of_words_teste(df_train_mlp_ciro_bw, mlp_ciro_bw).toarray(), df_train_mlp_ciro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_bw(df_ciro, mlp_ciro_bw,model_mlp_ciro_bw, 'predict_bw_MLP')

"""### Ciro - MLP - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_mlp_ciro_tfidf, mlp_ciro_tfidf, df_train_mlp_ciro_tfidf, df_teste_mlp_ciro_tfidf = \
# train_model_tfidf(MLPClassifier(max_iter=400), df_ciro_train, 100)
# model_mlp_ciro_tfidf = model_mlp_ciro_tfidf.fit(Bag_of_words_teste(df_train_mlp_ciro_tfidf, mlp_ciro_tfidf).toarray(), df_train_mlp_ciro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_tfidf(df_ciro, mlp_ciro_tfidf,model_mlp_ciro_tfidf, 'predict_tfidf_MLP')

"""### Ciro - KNN - bw"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_ciro_bw, knn_ciro_bw, df_train_knn_ciro_bw, df_teste_knn_ciro_bw = \
# train_model_bw(KNeighborsClassifier(), df_ciro_train, 100)
# model_knn_ciro_bw = model_knn_ciro_bw.fit(Bag_of_words_teste(df_train_knn_ciro_bw, knn_ciro_bw).toarray(), df_train_knn_ciro_bw['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_bw(df_ciro, knn_ciro_bw,model_knn_ciro_bw, 'predict_bw_KNN')

"""### Ciro - KNN - tfidf"""

# Commented out IPython magic to ensure Python compatibility.
# %%time
# model_knn_ciro_tfidf, knn_ciro_tfidf, df_train_knn_ciro_tfidf, df_teste_knn_ciro_tfidf = \
# train_model_tfidf(KNeighborsClassifier(), df_ciro_train, 100)
# model_knn_ciro_tfidf = model_knn_ciro_tfidf.fit(Bag_of_words_teste(df_train_knn_ciro_tfidf, knn_ciro_tfidf).toarray(), df_train_knn_ciro_tfidf['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int))
# 
# df_ciro = AnaliseSentimentos_tfidf(df_ciro, knn_ciro_tfidf,model_knn_ciro_tfidf, 'predict_tfidf_KNN')

df_bolsonaro.to_excel('bolsonaro_predict4.xlsx')
df_lula.to_excel('lula_predict4.xlsx')
df_simone.to_excel('simone_predict4.xlsx')
df_ciro.to_excel('ciro_predict4.xlsx')

def VotacaoPredict(df):
    for i in df.index:
        pos=0
        neu=0
        neg=0
        for j in ['predict_tfidf_MLP','predict_bw_MLP',
                  'predict_tfidf_SVM','predict_bw_SVM',
                 'predict_tfidf_RandomForest','predict_bw_RandomForest',
                 'predict_tfidf_NaiveBayes','predict_bw_NaiveBayes',
                 'predict_tfidf_ArvoreDeDecisao','predict_bw_ArvoreDeDecisao',
                 'predict_tfidf_KNN', 'predict_bw_KNN']:
            if (df.loc[i,j]==1):
                pos+=1
            elif (df.loc[i,j]==0):
                neu+=1    
            else:
                neg+=1
        
        if((neu>=neg)& (neu>=pos)):
            df.loc[i,'VotacaoPredict_norm'] = 0
        elif((neg>=pos)& (neg>=neu)):
            df.loc[i,'VotacaoPredict_norm'] = -1
        else:
            df.loc[i,'VotacaoPredict_norm'] = 1     
    #print(df['VotacaoPredict_ajust'].value_counts())
    print(df['VotacaoPredict_norm'].value_counts())        
    return df

df_bolsonaro_predict2 = VotacaoPredict(df_bolsonaro)
df_lula_predict2 = VotacaoPredict(df_lula)
df_simone_predict2 = VotacaoPredict(df_simone)
df_ciro_predict2 = VotacaoPredict(df_ciro)

df_bolsonaro_predict2.to_excel('bolsonaro_resultado_equilibrio2.xlsx')
df_lula_predict2.to_excel('lula_resultado_equilibrio2.xlsx')
df_simone_predict2.to_excel('simone_resultado_equilibrio2.xlsx')
df_ciro_predict2.to_excel('ciro_resultado_equilibrio2.xlsx')