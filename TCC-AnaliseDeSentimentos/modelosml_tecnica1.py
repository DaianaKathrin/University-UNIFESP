# -*- coding: utf-8 -*-
"""ModelosML_Tecnica1.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/10EMMnta8LzcwGdcbGBjU9a5AZLDQthCv

# Importando bases
"""

import pandas as pd
import numpy as np
from sklearn.feature_extraction.text import CountVectorizer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.feature_extraction.text import TfidfTransformer
from sklearn.naive_bayes import GaussianNB
from sklearn import tree
from sklearn.ensemble import RandomForestClassifier
from sklearn.svm import LinearSVC
from sklearn.neural_network import MLPClassifier

df_bolsonaro_train = pd.read_excel('Bolsonaro_treino_sem_stop.xlsx')  
df_lula_train = pd.read_excel('Lula_treino_sem_stop.xlsx') 
df_simone_train = pd.read_excel('Simone_treino_sem_stop.xlsx') 
df_ciro_train = pd.read_excel('Ciro_treino_sem_stop.xlsx')

df_bolsonaro = pd.read_excel('Bolsonaro_todos_sem_stop.xlsx', index_col=0)
df_lula = pd.read_excel('Lula_todos_sem_stop.xlsx', index_col=0)
df_simone = pd.read_excel('Simone_todos_sem_stop.xlsx', index_col=0)
df_ciro = pd.read_excel('Ciro_todos_sem_stop.xlsx', index_col=0)

df_lula_train = df_lula_train[df_lula_train['Sentimento']!=' ']

# Bag Of Words

def Bag_of_words(df):
    matrix = CountVectorizer()
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.fit_transform(text)
    return X, matrix

def Bag_of_words_teste(df, matrix):
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.transform(text)
    return X

def tfidf(df):
    matrix = TfidfVectorizer()
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.fit_transform(text)
    return X, matrix

def tfidf_teste(df, matrix):
    text = []
    for i in df.index:
        text.append("".join(df['novo_texto'][i]))
    X = matrix.transform(text)
    return X

"""## Base treino bag of words"""

X_bw_bolsonaro_train, bw_bolsonaro = Bag_of_words(df_bolsonaro_train)
X_bw_lula_train, bw_lula = Bag_of_words(df_lula_train)
X_bw_simone_train, bw_simone = Bag_of_words(df_simone_train)
X_bw_ciro_train, bw_ciro = Bag_of_words(df_ciro_train)

"""## Base treino tfidf"""

X_tfidf_bolsonaro_train, tfidf_bolsonaro = tfidf(df_bolsonaro_train)
X_tfidf_lula_train, tfidf_lula = tfidf(df_lula_train)
X_tfidf_simone_train, tfidf_simone = tfidf(df_simone_train)
X_tfidf_ciro_train, tfidf_ciro = tfidf(df_ciro_train)

"""# Predict treino"""

Y_bolsonaro_train = df_bolsonaro_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
Y_lula_train = df_lula_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
Y_simone_train = df_simone_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)
Y_ciro_train = df_ciro_train['Sentimento'].str.replace('p','1').replace('x','0').replace('n','-1').astype(int)

"""## Bolsonaro

### Bolsonaro - Arvore de Decisao - bw
"""

tree_bolsonaro_bw = tree.DecisionTreeClassifier()
tree_bolsonaro_bw = tree_bolsonaro_bw.fit(X_bw_bolsonaro_train, Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_bw_tree = tree_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray())
    else:
        predict_bolsonaro_bw_tree = np.append(predict_bolsonaro_bw_tree, tree_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_bw_tree = np.append(predict_bolsonaro_bw_tree,tree_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:], bw_bolsonaro).toarray()))


df_bolsonaro['predict_bw_ArvoreDeDecisao'] = predict_bolsonaro_bw_tree

np.unique(predict_bolsonaro_bw_tree, return_counts=True)

"""### Bolsonaro - Arvore de Decisao - tfidf"""

tree_bolsonaro_tfidf = tree.DecisionTreeClassifier()
tree_bolsonaro_tfidf = tree_bolsonaro_tfidf.fit(X_tfidf_bolsonaro_train, Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_tfidf_tree = tree_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray())
    else:
        predict_bolsonaro_tfidf_tree = np.append(predict_bolsonaro_tfidf_tree, tree_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_tfidf_tree = np.append(predict_bolsonaro_tfidf_tree,tree_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:], tfidf_bolsonaro).toarray()))


df_bolsonaro['predict_tfidf_ArvoreDeDecisao'] = predict_bolsonaro_tfidf_tree

np.unique(predict_bolsonaro_tfidf_tree, return_counts=True)

"""### Bolsonaro - Naive Bayes - bw"""

GaussianNB_bolsonaro_bw = GaussianNB()
GaussianNB_bolsonaro_bw = GaussianNB_bolsonaro_bw.fit(X_bw_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_bw_nb = GaussianNB_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray())
    else:
        predict_bolsonaro_bw_nb = np.append(predict_bolsonaro_bw_nb, GaussianNB_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_bw_nb = np.append(predict_bolsonaro_bw_nb,GaussianNB_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:], bw_bolsonaro).toarray()))

df_bolsonaro['predict_bw_NaiveBayes'] = predict_bolsonaro_bw_nb

np.unique(predict_bolsonaro_bw_nb, return_counts=True)

"""### Bolsonaro - Naive Bayes - tfidf"""

GaussianNB_bolsonaro_tfidf = GaussianNB()
GaussianNB_bolsonaro_tfidf = GaussianNB_bolsonaro_tfidf.fit(X_tfidf_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_tfidf_nb = GaussianNB_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray())
    else:
        predict_bolsonaro_tfidf_nb = np.append(predict_bolsonaro_tfidf_nb, GaussianNB_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_tfidf_nb = np.append(predict_bolsonaro_tfidf_nb,GaussianNB_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:], tfidf_bolsonaro).toarray()))

df_bolsonaro['predict_tfidf_NaiveBayes'] = predict_bolsonaro_tfidf_nb

np.unique(predict_bolsonaro_tfidf_nb, return_counts=True)

"""### Bolsonaro - Random Forest - bw"""

RandomForest_bolsonaro_bw = RandomForestClassifier()
RandomForest_bolsonaro_bw = RandomForest_bolsonaro_bw.fit(X_bw_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_bw_rf = RandomForest_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray())
    else:
        predict_bolsonaro_bw_rf = np.append(predict_bolsonaro_bw_rf, RandomForest_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_bw_rf = np.append(predict_bolsonaro_bw_rf,RandomForest_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:], bw_bolsonaro).toarray()))

df_bolsonaro['predict_bw_RandomForest'] = predict_bolsonaro_bw_rf

np.unique(predict_bolsonaro_bw_rf, return_counts=True)

"""### Bolsonaro - Random Forest - tfidf"""

RandomForest_bolsonaro_tfidf = RandomForestClassifier()
RandomForest_bolsonaro_tfidf = RandomForest_bolsonaro_tfidf.fit(X_tfidf_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_tfidf_rf = RandomForest_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray())
    else:
        predict_bolsonaro_tfidf_rf = np.append(predict_bolsonaro_tfidf_rf, RandomForest_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_tfidf_rf = np.append(predict_bolsonaro_tfidf_rf,RandomForest_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:], tfidf_bolsonaro).toarray()))

df_bolsonaro['predict_tfidf_RandomForest'] = predict_bolsonaro_tfidf_rf

np.unique(predict_bolsonaro_tfidf_rf, return_counts=True)

"""### Bolsonaro - SVM - bw"""

svc_bolsonaro_bw = LinearSVC()
svc_bolsonaro_bw = svc_bolsonaro_bw.fit(X_bw_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_bw_svc = svc_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray())
    else:
        predict_bolsonaro_bw_svc = np.append(predict_bolsonaro_bw_svc, svc_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_bw_svc = np.append(predict_bolsonaro_bw_svc,svc_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:], bw_bolsonaro).toarray()))

df_bolsonaro['predict_bw_svc'] = predict_bolsonaro_bw_svc

np.unique(predict_bolsonaro_bw_svc, return_counts=True)

"""### Bolsonaro - SVM - tfidf"""

svc_bolsonaro_tfidf = LinearSVC()
svc_bolsonaro_tfidf = svc_bolsonaro_tfidf.fit(X_tfidf_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_tfidf_svc = svc_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray())
    else:
        predict_bolsonaro_tfidf_svc = np.append(predict_bolsonaro_tfidf_svc, svc_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_tfidf_svc = np.append(predict_bolsonaro_tfidf_svc,svc_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:], tfidf_bolsonaro).toarray()))

df_bolsonaro['predict_tfidf_svc'] = predict_bolsonaro_tfidf_svc

np.unique(predict_bolsonaro_tfidf_svc, return_counts=True)

"""### Bolsonaro - MLP - bw"""

mlp_bolsonaro_bw = MLPClassifier()
mlp_bolsonaro_bw = mlp_bolsonaro_bw.fit(X_bw_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_bw_mlp = mlp_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray())
    else:
        predict_bolsonaro_bw_mlp = np.append(predict_bolsonaro_bw_mlp, mlp_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:i], bw_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_bw_mlp = np.append(predict_bolsonaro_bw_mlp,mlp_bolsonaro_bw.predict(Bag_of_words_teste(df_bolsonaro[i1:], bw_bolsonaro).toarray()))

df_bolsonaro['predict_bw_mlp'] = predict_bolsonaro_bw_mlp
df_bolsonaro['predict_bw_mlp2'] = predict_bolsonaro_bw_mlp

np.unique(predict_bolsonaro_bw_mlp, return_counts=True)

"""### Bolsonaro - MLP - tfidf"""

mlp_bolsonaro_tfidf = MLPClassifier()
mlp_bolsonaro_tfidf = mlp_bolsonaro_tfidf.fit(X_tfidf_bolsonaro_train.toarray(), Y_bolsonaro_train)

i1=0
for i in range(5000,len(df_bolsonaro),5000):
    if (i==5000):
        predict_bolsonaro_tfidf_mlp = mlp_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray())
    else:
        predict_bolsonaro_tfidf_mlp = np.append(predict_bolsonaro_tfidf_mlp, mlp_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:i], tfidf_bolsonaro).toarray()))
    i1=i

predict_bolsonaro_tfidf_mlp = np.append(predict_bolsonaro_tfidf_mlp,mlp_bolsonaro_tfidf.predict(tfidf_teste(df_bolsonaro[i1:], tfidf_bolsonaro).toarray()))

df_bolsonaro['predict_tfidf_mlp'] = predict_bolsonaro_tfidf_mlp
df_bolsonaro['predict_tfidf_mlp2'] = predict_bolsonaro_tfidf_mlp

np.unique(predict_bolsonaro_tfidf_mlp, return_counts=True)

"""# Lula

### Lula - Arvore de Decisao - bw
"""

tree_lula_bw = tree.DecisionTreeClassifier()
tree_lula_bw = tree_lula_bw.fit(X_bw_lula_train, Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_bw_tree = tree_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray())
    else:
        predict_lula_bw_tree = np.append(predict_lula_bw_tree, tree_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray()))
    i1=i

predict_lula_bw_tree = np.append(predict_lula_bw_tree,tree_lula_bw.predict(Bag_of_words_teste(df_lula[i1:], bw_lula).toarray()))


df_lula['predict_bw_ArvoreDeDecisao'] = predict_lula_bw_tree

np.unique(predict_lula_bw_tree, return_counts=True)

"""### Lula - Arvore de Decisao - tfidf"""

tree_lula_tfidf = tree.DecisionTreeClassifier()
tree_lula_tfidf = tree_lula_tfidf.fit(X_tfidf_lula_train, Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_tfidf_tree = tree_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray())
    else:
        predict_lula_tfidf_tree = np.append(predict_lula_tfidf_tree, tree_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray()))
    i1=i

predict_lula_tfidf_tree = np.append(predict_lula_tfidf_tree,tree_lula_tfidf.predict(tfidf_teste(df_lula[i1:], tfidf_lula).toarray()))


df_lula['predict_tfidf_ArvoreDeDecisao'] = predict_lula_tfidf_tree

np.unique(predict_lula_tfidf_tree, return_counts=True)

"""### Lula - Naive Bayes - bw"""

GaussianNB_lula_bw = GaussianNB()
GaussianNB_lula_bw = GaussianNB_lula_bw.fit(X_bw_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_bw_nb = GaussianNB_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray())
    else:
        predict_lula_bw_nb = np.append(predict_lula_bw_nb, GaussianNB_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray()))
    i1=i

predict_lula_bw_nb = np.append(predict_lula_bw_nb,GaussianNB_lula_bw.predict(Bag_of_words_teste(df_lula[i1:], bw_lula).toarray()))

df_lula['predict_bw_NaiveBayes'] = predict_lula_bw_nb

np.unique(predict_lula_bw_nb, return_counts=True)

"""### Lula - Naive Bayes - tfidf"""

GaussianNB_lula_tfidf = GaussianNB()
GaussianNB_lula_tfidf = GaussianNB_lula_tfidf.fit(X_tfidf_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_tfidf_nb = GaussianNB_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray())
    else:
        predict_lula_tfidf_nb = np.append(predict_lula_tfidf_nb, GaussianNB_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray()))
    i1=i

predict_lula_tfidf_nb = np.append(predict_lula_tfidf_nb,GaussianNB_lula_tfidf.predict(tfidf_teste(df_lula[i1:], tfidf_lula).toarray()))

df_lula['predict_tfidf_NaiveBayes'] = predict_lula_tfidf_nb

np.unique(predict_lula_tfidf_nb, return_counts=True)

"""### Lula - Random Forest - bw"""

RandomForest_lula_bw = RandomForestClassifier()
RandomForest_lula_bw = RandomForest_lula_bw.fit(X_bw_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_bw_rf = RandomForest_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray())
    else:
        predict_lula_bw_rf = np.append(predict_lula_bw_rf, RandomForest_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray()))
    i1=i

predict_lula_bw_rf = np.append(predict_lula_bw_rf,RandomForest_lula_bw.predict(Bag_of_words_teste(df_lula[i1:], bw_lula).toarray()))

df_lula['predict_bw_RandomForest'] = predict_lula_bw_rf

np.unique(predict_lula_bw_rf, return_counts=True)

"""### Lula - Random Forest - tfidf"""

RandomForest_lula_tfidf = RandomForestClassifier()
RandomForest_lula_tfidf = RandomForest_lula_tfidf.fit(X_tfidf_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_tfidf_rf = RandomForest_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray())
    else:
        predict_lula_tfidf_rf = np.append(predict_lula_tfidf_rf, RandomForest_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray()))
    i1=i

predict_lula_tfidf_rf = np.append(predict_lula_tfidf_rf,RandomForest_lula_tfidf.predict(tfidf_teste(df_lula[i1:], tfidf_lula).toarray()))

df_lula['predict_tfidf_RandomForest'] = predict_lula_tfidf_rf

np.unique(predict_lula_tfidf_rf, return_counts=True)

"""### lula - SVM - bw"""

svc_lula_bw = LinearSVC()
svc_lula_bw = svc_lula_bw.fit(X_bw_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_bw_svc = svc_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray())
    else:
        predict_lula_bw_svc = np.append(predict_lula_bw_svc, svc_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray()))
    i1=i

predict_lula_bw_svc = np.append(predict_lula_bw_svc,svc_lula_bw.predict(Bag_of_words_teste(df_lula[i1:], bw_lula).toarray()))

df_lula['predict_bw_svc'] = predict_lula_bw_svc

np.unique(predict_lula_bw_svc, return_counts=True)

"""### lula - SVM - tfidf"""

svc_lula_tfidf = LinearSVC()
svc_lula_tfidf = svc_lula_tfidf.fit(X_tfidf_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_tfidf_svc = svc_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray())
    else:
        predict_lula_tfidf_svc = np.append(predict_lula_tfidf_svc, svc_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray()))
    i1=i

predict_lula_tfidf_svc = np.append(predict_lula_tfidf_svc,svc_lula_tfidf.predict(tfidf_teste(df_lula[i1:], tfidf_lula).toarray()))

df_lula['predict_tfidf_svc'] = predict_lula_tfidf_svc

np.unique(predict_lula_tfidf_svc, return_counts=True)

"""### Lula - MLP - bw"""

mlp_lula_bw = MLPClassifier()
mlp_lula_bw = mlp_lula_bw.fit(X_bw_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_bw_mlp = mlp_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray())
    else:
        predict_lula_bw_mlp = np.append(predict_lula_bw_mlp, mlp_lula_bw.predict(Bag_of_words_teste(df_lula[i1:i], bw_lula).toarray()))
    i1=i

predict_lula_bw_mlp = np.append(predict_lula_bw_mlp,mlp_lula_bw.predict(Bag_of_words_teste(df_lula[i1:], bw_lula).toarray()))

df_lula['predict_bw_mlp'] = predict_lula_bw_mlp
df_lula['predict_bw_mlp2'] = predict_lula_bw_mlp

np.unique(predict_lula_bw_mlp, return_counts=True)

"""### Lula - MLP - tfidf"""

mlp_lula_tfidf = MLPClassifier()
mlp_lula_tfidf = mlp_lula_tfidf.fit(X_tfidf_lula_train.toarray(), Y_lula_train)

i1=0
for i in range(5000,len(df_lula),5000):
    if (i==5000):
        predict_lula_tfidf_mlp = mlp_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray())
    else:
        predict_lula_tfidf_mlp = np.append(predict_lula_tfidf_mlp, mlp_lula_tfidf.predict(tfidf_teste(df_lula[i1:i], tfidf_lula).toarray()))
    i1=i

predict_lula_tfidf_mlp = np.append(predict_lula_tfidf_mlp,mlp_lula_tfidf.predict(tfidf_teste(df_lula[i1:], tfidf_lula).toarray()))

df_lula['predict_tfidf_mlp'] = predict_lula_tfidf_mlp
df_lula['predict_tfidf_mlp2'] = predict_lula_tfidf_mlp

np.unique(predict_lula_tfidf_mlp, return_counts=True)

"""# Simone

### Simone - Arvore de Decisao - bw
"""

tree_simone_bw = tree.DecisionTreeClassifier()
tree_simone_bw = tree_simone_bw.fit(X_bw_simone_train, Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_bw_tree = tree_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray())
    else:
        predict_simone_bw_tree = np.append(predict_simone_bw_tree, tree_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray()))
    i1=i

predict_simone_bw_tree = np.append(predict_simone_bw_tree,tree_simone_bw.predict(Bag_of_words_teste(df_simone[i1:], bw_simone).toarray()))


df_simone['predict_bw_ArvoreDeDecisao'] = predict_simone_bw_tree

np.unique(predict_simone_bw_tree, return_counts=True)

"""### Simone - Arvore de Decisao - tfidf"""

tree_simone_tfidf = tree.DecisionTreeClassifier()
tree_simone_tfidf = tree_simone_tfidf.fit(X_tfidf_simone_train, Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_tfidf_tree = tree_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray())
    else:
        predict_simone_tfidf_tree = np.append(predict_simone_tfidf_tree, tree_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray()))
    i1=i

predict_simone_tfidf_tree = np.append(predict_simone_tfidf_tree,tree_simone_tfidf.predict(tfidf_teste(df_simone[i1:], tfidf_simone).toarray()))


df_simone['predict_tfidf_ArvoreDeDecisao'] = predict_simone_tfidf_tree

np.unique(predict_simone_tfidf_tree, return_counts=True)

"""### Simone - Naive Bayes - bw"""

GaussianNB_simone_bw = GaussianNB()
GaussianNB_simone_bw = GaussianNB_simone_bw.fit(X_bw_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_bw_nb = GaussianNB_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray())
    else:
        predict_simone_bw_nb = np.append(predict_simone_bw_nb, GaussianNB_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray()))
    i1=i

predict_simone_bw_nb = np.append(predict_simone_bw_nb,GaussianNB_simone_bw.predict(Bag_of_words_teste(df_simone[i1:], bw_simone).toarray()))

df_simone['predict_bw_NaiveBayes'] = predict_simone_bw_nb

np.unique(predict_simone_bw_nb, return_counts=True)

"""### Simone - Naive Bayes - tfidf"""

GaussianNB_simone_tfidf = GaussianNB()
GaussianNB_simone_tfidf = GaussianNB_simone_tfidf.fit(X_tfidf_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_tfidf_nb = GaussianNB_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray())
    else:
        predict_simone_tfidf_nb = np.append(predict_simone_tfidf_nb, GaussianNB_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray()))
    i1=i

predict_simone_tfidf_nb = np.append(predict_simone_tfidf_nb,GaussianNB_simone_tfidf.predict(tfidf_teste(df_simone[i1:], tfidf_simone).toarray()))

df_simone['predict_tfidf_NaiveBayes'] = predict_simone_tfidf_nb

np.unique(predict_simone_tfidf_nb, return_counts=True)

"""### Simone - Random Forest - bw"""

RandomForest_simone_bw = RandomForestClassifier()
RandomForest_simone_bw = RandomForest_simone_bw.fit(X_bw_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_bw_rf = RandomForest_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray())
    else:
        predict_simone_bw_rf = np.append(predict_simone_bw_rf, RandomForest_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray()))
    i1=i

predict_simone_bw_rf = np.append(predict_simone_bw_rf,RandomForest_simone_bw.predict(Bag_of_words_teste(df_simone[i1:], bw_simone).toarray()))

df_simone['predict_bw_RandomForest'] = predict_simone_bw_rf

np.unique(predict_simone_bw_rf, return_counts=True)

"""### Simone - Random Forest - tfidf"""

RandomForest_simone_tfidf = RandomForestClassifier()
RandomForest_simone_tfidf = RandomForest_simone_tfidf.fit(X_tfidf_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_tfidf_rf = RandomForest_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray())
    else:
        predict_simone_tfidf_rf = np.append(predict_simone_tfidf_rf, RandomForest_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray()))
    i1=i

predict_simone_tfidf_rf = np.append(predict_simone_tfidf_rf,RandomForest_simone_tfidf.predict(tfidf_teste(df_simone[i1:], tfidf_simone).toarray()))

df_simone['predict_tfidf_RandomForest'] = predict_simone_tfidf_rf

np.unique(predict_simone_tfidf_rf, return_counts=True)

"""### Simone - SVM - bw"""

svc_simone_bw = LinearSVC()
svc_simone_bw = svc_simone_bw.fit(X_bw_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_bw_svc = svc_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray())
    else:
        predict_simone_bw_svc = np.append(predict_simone_bw_svc, svc_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray()))
    i1=i

predict_simone_bw_svc = np.append(predict_simone_bw_svc,svc_simone_bw.predict(Bag_of_words_teste(df_simone[i1:], bw_simone).toarray()))

df_simone['predict_bw_svc'] = predict_simone_bw_svc

np.unique(predict_simone_bw_svc, return_counts=True)

"""### Simone - SVM - tfidf"""

svc_simone_tfidf = LinearSVC()
svc_simone_tfidf = svc_simone_tfidf.fit(X_tfidf_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_tfidf_svc = svc_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray())
    else:
        predict_simone_tfidf_svc = np.append(predict_simone_tfidf_svc, svc_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray()))
    i1=i

predict_simone_tfidf_svc = np.append(predict_simone_tfidf_svc,svc_simone_tfidf.predict(tfidf_teste(df_simone[i1:], tfidf_simone).toarray()))

df_simone['predict_tfidf_svc'] = predict_simone_tfidf_svc

np.unique(predict_simone_tfidf_svc, return_counts=True)

"""### Simone - MLP - bw"""

mlp_simone_bw = MLPClassifier()
mlp_simone_bw = mlp_simone_bw.fit(X_bw_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_bw_mlp = mlp_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray())
    else:
        predict_simone_bw_mlp = np.append(predict_simone_bw_mlp, mlp_simone_bw.predict(Bag_of_words_teste(df_simone[i1:i], bw_simone).toarray()))
    i1=i

predict_simone_bw_mlp = np.append(predict_simone_bw_mlp,mlp_simone_bw.predict(Bag_of_words_teste(df_simone[i1:], bw_simone).toarray()))

df_simone['predict_bw_mlp'] = predict_simone_bw_mlp
df_simone['predict_bw_mlp2'] = predict_simone_bw_mlp

np.unique(predict_simone_bw_mlp, return_counts=True)

"""### Simone - MLP - tfidf"""

mlp_simone_tfidf = MLPClassifier()
mlp_simone_tfidf = mlp_simone_tfidf.fit(X_tfidf_simone_train.toarray(), Y_simone_train)

i1=0
for i in range(5000,len(df_simone),5000):
    if (i==5000):
        predict_simone_tfidf_mlp = mlp_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray())
    else:
        predict_simone_tfidf_mlp = np.append(predict_simone_tfidf_mlp, mlp_simone_tfidf.predict(tfidf_teste(df_simone[i1:i], tfidf_simone).toarray()))
    i1=i

predict_simone_tfidf_mlp = np.append(predict_simone_tfidf_mlp,mlp_simone_tfidf.predict(tfidf_teste(df_simone[i1:], tfidf_simone).toarray()))

df_simone['predict_tfidf_mlp'] = predict_simone_tfidf_mlp
df_simone['predict_tfidf_mlp2'] = predict_simone_tfidf_mlp

np.unique(predict_simone_tfidf_mlp, return_counts=True)

"""# Ciro

### Ciro - Arvore de Decisao - bw
"""

tree_ciro_bw = tree.DecisionTreeClassifier()
tree_ciro_bw = tree_ciro_bw.fit(X_bw_ciro_train, Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_bw_tree = tree_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray())
    else:
        predict_ciro_bw_tree = np.append(predict_ciro_bw_tree, tree_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray()))
    i1=i

predict_ciro_bw_tree = np.append(predict_ciro_bw_tree,tree_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:], bw_ciro).toarray()))


df_ciro['predict_bw_ArvoreDeDecisao'] = predict_ciro_bw_tree

np.unique(predict_ciro_bw_tree, return_counts=True)

"""### Ciro - Arvore de Decisao - tfidf"""

tree_ciro_tfidf = tree.DecisionTreeClassifier()
tree_ciro_tfidf = tree_ciro_tfidf.fit(X_tfidf_ciro_train, Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_tfidf_tree = tree_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray())
    else:
        predict_ciro_tfidf_tree = np.append(predict_ciro_tfidf_tree, tree_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray()))
    i1=i

predict_ciro_tfidf_tree = np.append(predict_ciro_tfidf_tree,tree_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:], tfidf_ciro).toarray()))


df_ciro['predict_tfidf_ArvoreDeDecisao'] = predict_ciro_tfidf_tree

np.unique(predict_ciro_tfidf_tree, return_counts=True)

"""### Ciro - Naive Bayes - bw"""

GaussianNB_ciro_bw = GaussianNB()
GaussianNB_ciro_bw = GaussianNB_ciro_bw.fit(X_bw_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_bw_nb = GaussianNB_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray())
    else:
        predict_ciro_bw_nb = np.append(predict_ciro_bw_nb, GaussianNB_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray()))
    i1=i

predict_ciro_bw_nb = np.append(predict_ciro_bw_nb,GaussianNB_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:], bw_ciro).toarray()))

df_ciro['predict_bw_NaiveBayes'] = predict_ciro_bw_nb

np.unique(predict_ciro_bw_nb, return_counts=True)

"""### Ciro - Naive Bayes - tfidf"""

GaussianNB_ciro_tfidf = GaussianNB()
GaussianNB_ciro_tfidf = GaussianNB_ciro_tfidf.fit(X_tfidf_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_tfidf_nb = GaussianNB_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray())
    else:
        predict_ciro_tfidf_nb = np.append(predict_ciro_tfidf_nb, GaussianNB_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray()))
    i1=i

predict_ciro_tfidf_nb = np.append(predict_ciro_tfidf_nb,GaussianNB_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:], tfidf_ciro).toarray()))

df_ciro['predict_tfidf_NaiveBayes'] = predict_ciro_tfidf_nb

np.unique(predict_ciro_tfidf_nb, return_counts=True)

"""### Ciro - Random Forest - bw"""

RandomForest_ciro_bw = RandomForestClassifier()
RandomForest_ciro_bw = RandomForest_ciro_bw.fit(X_bw_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_bw_rf = RandomForest_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray())
    else:
        predict_ciro_bw_rf = np.append(predict_ciro_bw_rf, RandomForest_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray()))
    i1=i

predict_ciro_bw_rf = np.append(predict_ciro_bw_rf,RandomForest_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:], bw_ciro).toarray()))

df_ciro['predict_bw_RandomForest'] = predict_ciro_bw_rf

np.unique(predict_ciro_bw_rf, return_counts=True)

"""### Ciro - Random Forest - tfidf"""

RandomForest_ciro_tfidf = RandomForestClassifier()
RandomForest_ciro_tfidf = RandomForest_ciro_tfidf.fit(X_tfidf_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_tfidf_rf = RandomForest_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray())
    else:
        predict_ciro_tfidf_rf = np.append(predict_ciro_tfidf_rf, RandomForest_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray()))
    i1=i

predict_ciro_tfidf_rf = np.append(predict_ciro_tfidf_rf,RandomForest_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:], tfidf_ciro).toarray()))

df_ciro['predict_tfidf_RandomForest'] = predict_ciro_tfidf_rf

np.unique(predict_ciro_tfidf_rf, return_counts=True)

"""### Ciro - SVM - bw"""

svc_ciro_bw = LinearSVC()
svc_ciro_bw = svc_ciro_bw.fit(X_bw_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_bw_svc = svc_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray())
    else:
        predict_ciro_bw_svc = np.append(predict_ciro_bw_svc, svc_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray()))
    i1=i

predict_ciro_bw_svc = np.append(predict_ciro_bw_svc,svc_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:], bw_ciro).toarray()))

df_ciro['predict_bw_svc'] = predict_ciro_bw_svc

np.unique(predict_ciro_bw_svc, return_counts=True)

"""### Ciro - SVM - tfidf"""

svc_ciro_tfidf = LinearSVC()
svc_ciro_tfidf = svc_ciro_tfidf.fit(X_tfidf_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_tfidf_svc = svc_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray())
    else:
        predict_ciro_tfidf_svc = np.append(predict_ciro_tfidf_svc, svc_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray()))
    i1=i

predict_ciro_tfidf_svc = np.append(predict_ciro_tfidf_svc,svc_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:], tfidf_ciro).toarray()))

df_ciro['predict_tfidf_svc'] = predict_ciro_tfidf_svc

np.unique(predict_ciro_tfidf_svc, return_counts=True)

"""### Ciro - MLP - bw"""

mlp_ciro_bw = MLPClassifier()
mlp_ciro_bw = mlp_ciro_bw.fit(X_bw_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_bw_mlp = mlp_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray())
    else:
        predict_ciro_bw_mlp = np.append(predict_ciro_bw_mlp, mlp_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:i], bw_ciro).toarray()))
    i1=i

predict_ciro_bw_mlp = np.append(predict_ciro_bw_mlp,mlp_ciro_bw.predict(Bag_of_words_teste(df_ciro[i1:], bw_ciro).toarray()))

df_ciro['predict_bw_mlp'] = predict_ciro_bw_mlp
df_ciro['predict_bw_mlp2'] = predict_ciro_bw_mlp

np.unique(predict_ciro_bw_mlp, return_counts=True)

"""### Ciro - MLP - tfidf"""

mlp_ciro_tfidf = MLPClassifier()
mlp_ciro_tfidf = mlp_ciro_tfidf.fit(X_tfidf_ciro_train.toarray(), Y_ciro_train)

i1=0
for i in range(5000,len(df_ciro),5000):
    if (i==5000):
        predict_ciro_tfidf_mlp = mlp_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray())
    else:
        predict_ciro_tfidf_mlp = np.append(predict_ciro_tfidf_mlp, mlp_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:i], tfidf_ciro).toarray()))
    i1=i

predict_ciro_tfidf_mlp = np.append(predict_ciro_tfidf_mlp,mlp_ciro_tfidf.predict(tfidf_teste(df_ciro[i1:], tfidf_ciro).toarray()))

df_ciro['predict_tfidf_mlp'] = predict_ciro_tfidf_mlp
df_ciro['predict_tfidf_mlp2'] = predict_ciro_tfidf_mlp

np.unique(predict_ciro_tfidf_mlp, return_counts=True)

df_bolsonaro.to_excel('bolsonaro_predict.xlsx')
df_lula.to_excel('lula_predict.xlsx')
df_simone.to_excel('simone_predict.xlsx')
df_ciro.to_excel('ciro_predict.xlsx')

def VotacaoPredict(df):
    for i in df.index:
        pos=0
        neu=0
        neg=0
        for j in ['predict_tfidf_mlp','predict_bw_mlp',
                  'predict_tfidf_svc','predict_bw_svc',
                 'predict_tfidf_RandomForest','predict_bw_RandomForest',
                 'predict_tfidf_NaiveBayes','predict_bw_NaiveBayes',
                 'predict_tfidf_ArvoreDeDecisao','predict_bw_ArvoreDeDecisao']:
            if (df.loc[i,j]==1):
                pos+=1
            elif (df.loc[i,j]==0):
                neu+=1    
            else:
                neg+=1
            
        if(neu>2):
            df.loc[i,'VotacaoPredict_ajust'] = 0
        elif(neg>2):
            df.loc[i,'VotacaoPredict_ajust'] = -1
        else:
            df.loc[i,'VotacaoPredict_ajust'] = 1
        
        if((neu>=neg)& (neu>=pos)):
            df.loc[i,'VotacaoPredict_norm'] = 0
        elif((neg>=pos)& (neg>=neu)):
            df.loc[i,'VotacaoPredict_norm'] = -1
        else:
            df.loc[i,'VotacaoPredict_norm'] = 1     
    print(df['VotacaoPredict_ajust'].value_counts())
    print(df['VotacaoPredict_norm'].value_counts())        
    return df

for c in df_ciro_predict2.columns:
    print ("---- %s ---" % c)
    print (df_ciro_predict2[c].value_counts())

df_bolsonaro_predict2 = VotacaoPredict(df_bolsonaro)
df_lula_predict2 = VotacaoPredict(df_lula)
df_simone_predict2 = VotacaoPredict(df_simone)
df_ciro_predict2 = VotacaoPredict(df_ciro)

df_bolsonaro_predict2 = VotacaoPredict(df_bolsonaro)
df_lula_predict2 = VotacaoPredict(df_lula)
df_simone_predict2 = VotacaoPredict(df_simone)
df_ciro_predict2 = VotacaoPredict(df_ciro)

print(df_bolsonaro_predict2['VotacaoPredict_ajust'].value_counts())
print(df_lula_predict2['VotacaoPredict_norm'].value_counts())
print(df_simone_predict2['VotacaoPredict_norm'].value_counts())
print(df_ciro_predict2['VotacaoPredict_norm'].value_counts())

"""## df_lula_predict2.loc[931705,'VotacaoPredict_norm']"""

df_lula_train['Sentimento'].value_counts()

df_lula_predict2['VotacaoPredict_ajust'].value_counts()

df_lula_predict2[df_lula_predict2['VotacaoPredict_ajust']==-1]['Texto']

df_lula_predict2[['Texto', 'VotacaoPredict_ajust','VotacaoPredict_norm']]

df_lula_predict[['Texto', 'VotacaoPredict_ajust','VotacaoPredict_norm']]

df_bolsonaro_predict2.to_excel('bolsonaro_resultado2.xlsx')
df_lula_predict2.to_excel('lula_resultado2.xlsx')
df_simone_predict2.to_excel('simone_resultado2.xlsx')
df_ciro_predict2.to_excel('ciro_resultado2.xlsx')

df_bolsonaro_predict

df_bolsonaro_predict['VotacaoPredict_ajust'].value_counts()

# df_bolsonaro = pd.read_excel('bolsonaro_predict1.xlsx', index_col=0)
# df_lula = pd.read_excel('lula_predict1.xlsx', index_col=0)
# df_simone = pd.read_excel('simone_predict1.xlsx', index_col=0)
# df_ciro = pd.read_excel('ciro_predict1.xlsx', index_col=0)